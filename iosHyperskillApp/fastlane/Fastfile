fastlane_version "2.211.0"

default_platform(:ios)

platform :ios do
  # Config variables
  app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)

  team_name = CredentialsManager::AppfileConfig.try_fetch_value(:team_name)
  team_id = CredentialsManager::AppfileConfig.try_fetch_value(:team_id)

  itc_team_name = CredentialsManager::AppfileConfig.try_fetch_value(:itc_team_name)
  itc_team_id = CredentialsManager::AppfileConfig.try_fetch_value(:itc_team_id)

  firebase_app_id = ENV["FIREBASE_APP_ID"]
  firebase_cli_token = ENV["FIREBASE_CLI_TOKEN"]

  keychain_name = ENV["KEYCHAIN_NAME"]
  keychain_password = ENV["KEYCHAIN_PASSWORD"]

  # Constants

  schemes = {
    "iosHyperskillApp" => [
      "iosHyperskillApp",
    ],
  }

  configurations = {
    "iosHyperskillApp" => "Release",
  }

  after_all do |lane, options|
    clean_build_artifacts
  end

  error do |lane, exception|
    clean_build_artifacts
  end

  # Building and Releasing

  desc "Deploy a new version to the App Store"
  desc "Options: scheme, target, install_pods"
  lane :release do |options|
    scheme = options[:scheme] || "iosHyperskillApp"
    target = options[:target] || "iosHyperskillApp"
    install_pods = options.key?(:install_pods) ? options[:install_pods] : true

    app_identifier = get_bundle_id(target: target)

    clear_derived_data

    if install_pods
      cocoapods(try_repo_update_on_error: true)
    end

    setup_keychain

    if is_ci
      load_app_store_connect_api_token
    end

    match_release()

    # Disable automatic code signing -> build -> enable again
    set_manual_code_signing(
      provisioning_profile_mapping: lane_context[SharedValues::MATCH_PROVISIONING_PROFILE_MAPPING],
      scheme: scheme,
    )

    begin
      gym(
        scheme: "#{scheme}",
        clean: true,
        output_directory: "artifacts",
        output_name: "#{scheme}.ipa",
        include_bitcode: true,
        skip_profile_detection: true,
        export_method: "app-store",
        export_options: {
          # use only provisioning profiles from match
          provisioningProfiles: lane_context[SharedValues::MATCH_PROVISIONING_PROFILE_MAPPING],
        },
        suppress_xcode_output: false,
      )
    ensure
      set_auto_code_signing(
        provisioning_profile_mapping: lane_context[SharedValues::MATCH_PROVISIONING_PROFILE_MAPPING],
        scheme: scheme,
      )
    end

    deliver(
      force: true,
      metadata_path: "./fastlane/metadata",
      app_identifier: app_identifier,
      # submit options
      submit_for_review: false,
      skip_screenshots: true,
      skip_metadata: false,
      phased_release: true,
      automatic_release: true,
      precheck_include_in_app_purchases: is_ci ? false : true,
      submission_information: {
        export_compliance_encryption_updated: false,
        add_id_info_uses_idfa: true,
        add_id_info_serves_ads: false,
        add_id_info_tracks_action: true,
        add_id_info_tracks_install: false,
      },
    )

    dsym_path = lane_context[SharedValues::DSYM_OUTPUT_PATH]

    vs = make_version_string(
      version_number: get_version_number(target: target),
      build_number: get_build_number,
    )
    UI.success "Successfully released Hyperskill iOS RELEASE #{scheme} #{vs}"
  end

  desc "Submit a new Beta Build to Firebase."
  desc "This will also make sure the profile is up to date."
  desc "Options: scheme, target, install_pods"
  lane :beta do |options|
    scheme = options[:scheme] || "iosHyperskillApp"
    target = options[:target] || "iosHyperskillApp"
    install_pods = options.key?(:install_pods) ? options[:install_pods] : true

    setup_keychain

    clear_derived_data

    if install_pods
      cocoapods(try_repo_update_on_error: true)
    end

    if is_ci
      load_app_store_connect_api_token
    end

    sync_device_info()
    match_adhoc()

    # Disable automatic code signing -> build -> enable again
    set_manual_code_signing(
      provisioning_profile_mapping: lane_context[SharedValues::MATCH_PROVISIONING_PROFILE_MAPPING],
      scheme: scheme,
    )

    # Add BETA_PROFILE to SWIFT_ACTIVE_COMPILATION_CONDITIONS -> build -> remove
    update_beta_profile_compilation_condition(scheme: scheme, configurations: configurations, should_remove: false)

    begin
      gym(
        scheme: "#{scheme}",
        clean: true,
        output_directory: "artifacts",
        output_name: "#{scheme}.ipa",
        include_bitcode: true,
        skip_profile_detection: true,
        export_method: "ad-hoc",
        export_options: {
          # use only provisioning profiles from match
          provisioningProfiles: lane_context[SharedValues::MATCH_PROVISIONING_PROFILE_MAPPING],
        },
        suppress_xcode_output: false,
      )
    ensure
      set_auto_code_signing(
        provisioning_profile_mapping: lane_context[SharedValues::MATCH_PROVISIONING_PROFILE_MAPPING],
        scheme: scheme,
      )
      update_beta_profile_compilation_condition(scheme: scheme, configurations: configurations, should_remove: true)
    end

    firebase_app_distribution(
      app: firebase_app_id,
      firebase_cli_token: firebase_cli_token,
      release_notes_file: "fastlane/release-notes.txt",
      groups: "all-ios-testers",
    )

    dsym_path = lane_context[SharedValues::DSYM_OUTPUT_PATH]

    vs = make_version_string(
      version_number: get_version_number(target: target),
      build_number: get_build_number,
    )
    UI.success "Successfully released Hyperskill iOS BETA #{scheme} #{vs}"
  end

  desc "Builds iOS App without packaging."
  desc "Options: scheme, target, install_pods"
  lane :build do |options|
    scheme = options[:scheme] || "iosHyperskillApp"
    target = options[:target] || "iosHyperskillApp"
    install_pods = options.key?(:install_pods) ? options[:install_pods] : true

    clear_derived_data

    if install_pods
      cocoapods(try_repo_update_on_error: true)
    end

    gym(
      scheme: "#{scheme}",
      clean: true,
      skip_package_ipa: true,
      skip_archive: true,
      skip_codesigning: true,
      suppress_xcode_output: false,
    )

    vs = make_version_string(
      version_number: get_version_number(target: target),
      build_number: get_build_number,
    )
    UI.success "Successfully builded Hyperskill iOS App #{scheme} #{vs}"
  end

  # Testing

  desc "Run all unit tests for scheme"
  desc "Options: install_pods"
  lane :run_unit_tests do |options|
    install_pods = options.key?(:install_pods) ? options[:install_pods] : true

    clear_derived_data

    ENV["FASTLANE_EXPLICIT_OPEN_SIMULATOR"] = "0"

    if install_pods
      cocoapods(try_repo_update_on_error: true)
    end

    scan()
  end

  # Code Signing

  desc "Registers new devices to the Apple Dev Portal"
  lane :sync_device_info do
    register_devices(
      devices_file: "fastlane/Devicefile",
      team_id: team_id,
      team_name: team_name,
    )
  end

  desc "Match all certificates for scheme"
  desc "Options: scheme, read_only"
  lane :match_all do |options|
    params = {
      :read_only => options.key?(:read_only) ? options[:read_only] : true,
    }

    match_dev(params)
    match_adhoc(params)
    match_release(params)
  end

  desc "Match development certificates for scheme"
  desc "Options: scheme, read_only"
  lane :match_dev do |options|
    match_scheme(
      type: "development",
      read_only: options.key?(:read_only) ? options[:read_only] : true,
    )
  end

  desc "Match adhoc certificates for scheme"
  desc "Options: scheme, read_only"
  lane :match_adhoc do |options|
    match_scheme(
      type: "adhoc",
      read_only: options.key?(:read_only) ? options[:read_only] : true,
    )
  end

  desc "Match appstore certificates for scheme."
  desc "Options: scheme, read_only"
  lane :match_release do |options|
    match_scheme(
      type: "appstore",
      read_only: options.key?(:read_only) ? options[:read_only] : true,
    )
  end

  private_lane :match_scheme do |options|
    type = options[:type]
    read_only = options.key?(:read_only) ? options[:read_only] : true

    match(
      type: type,
      readonly: read_only,
      app_identifier: app_identifier,
      team_id: team_id,
      team_name: team_name,
      keychain_name: keychain_name || nil,
      keychain_password: keychain_password,
      force_for_new_devices: true,
    )
  end

  private_lane :set_manual_code_signing do |options|
    scheme = options[:scheme]
    provisioning_profile_mapping = options[:provisioning_profile_mapping]

    UI.user_error!("Wrong parameters") if scheme.nil? || provisioning_profile_mapping.nil?

    bundle_id_to_scheme = build_bundle_id_to_scheme_mapping(
      schemes: schemes,
      scheme: scheme,
      provisioning_profile_mapping: provisioning_profile_mapping,
    )

    provisioning_profile_mapping.each do |key, value|
      update_code_signing_settings(
        use_automatic_signing: false,
        targets: [bundle_id_to_scheme[key]],
        profile_name: value,
        team_id: team_id,
        code_sign_identity: "iPhone Distribution",
      )
    end
  end

  private_lane :set_auto_code_signing do |options|
    scheme = options[:scheme]
    provisioning_profile_mapping = options[:provisioning_profile_mapping]

    UI.user_error!("Wrong parameters") if scheme.nil? || provisioning_profile_mapping.nil?

    bundle_id_to_scheme = build_bundle_id_to_scheme_mapping(
      schemes: schemes,
      scheme: scheme,
      provisioning_profile_mapping: provisioning_profile_mapping,
    )

    provisioning_profile_mapping.each do |key, value|
      update_code_signing_settings(
        use_automatic_signing: true,
        targets: [bundle_id_to_scheme[key]],
        profile_name: "",
        team_id: team_id,
        code_sign_identity: "iPhone Developer",
      )
    end
  end

  private_lane :setup_keychain do |options|
    UI.user_error!("Missing KEYCHAIN_PASSWORD") if keychain_password.nil?

    if is_ci
      UI.user_error!("Missing KEYCHAIN_NAME") if keychain_name.nil?

      create_keychain(
        name: keychain_name,
        password: keychain_password,
        default_keychain: true,
        unlock: true,
        timeout: 0, # no time-out
      )
    else
      unlock_keychain(password: keychain_password)
    end
  end

  def build_bundle_id_to_scheme_mapping(options)
    schemes = options[:schemes]
    scheme = options[:scheme]
    provisioning_profile_mapping = options[:provisioning_profile_mapping]

    if schemes.nil? || scheme.nil? || provisioning_profile_mapping.nil?
      UI.user_error!("Wrong parameters")
    end

    bundle_id_to_scheme = {}
    dependent_targets = schemes[scheme]
    for target in dependent_targets
      bundle_id_to_scheme[get_bundle_id(target: target)] = target
    end

    bundle_id_to_scheme
  end

  def get_bundle_id(options)
    project_path = options[:xcodeproj] ? File.join(options[:xcodeproj], "..") : Dir.glob("../*.xcodeproj").first
    target = options[:target]

    if project_path
      project = Xcodeproj::Project.open(project_path)
    else
      UI.user_error!("Unable to find xcodeproj file")
    end

    native_target = project.native_targets.find { |native_target| native_target.name == target }
    build_configuration = native_target.build_configurations.first

    UI.user_error!("Unable to find build configuration") if build_configuration.nil?

    build_configuration.build_settings["PRODUCT_BUNDLE_IDENTIFIER"]
  end

  # Project

  desc "Increment the build number of project"
  lane :increment_build do
    increment_build_number
  end

  desc "Set the version of project"
  desc "Options: version"
  lane :set_version do |options|
    version = options[:version]

    UI.user_error!("Wrong version parameter") if version.nil?

    increment_version_number(version_number: version)
  end

  desc "Increment the minor version of project"
  lane :increment_minor_version do
    increment_version_number(bump_type: "minor")
  end

  def make_version_string(options)
    version = options[:version_number]
    build = options[:build_number]

    UI.user_error!("Wrong version parameter") if version.nil?
    UI.user_error!("Wrong build parameter") if build.nil?

    "v.#{version} (#{build})"
  end

  # Adds or removes BETA_PROFILE to project SWIFT_ACTIVE_COMPILATION_CONDITIONS
  def update_beta_profile_compilation_condition(options)
    require "xcodeproj"

    target_name = options[:target] || "iosHyperskillApp"
    scheme = options[:scheme]
    configurations = options[:configurations]
    should_remove = options[:should_remove] || false

    UI.user_error!("Wrong scheme parameter") if scheme.nil?
    UI.user_error!("Wrong configurations parameter") if configurations.nil?

    configuration_name = configurations[scheme]
    UI.user_error!("No configuration found for scheme #{scheme}") if configuration_name.nil?

    UI.message "Updating BETA_PROFILE build setting for scheme=#{scheme}, configuration=#{configuration_name}."

    project = Xcodeproj::Project.open("../iosHyperskillApp.xcodeproj")

    target = project.targets.find { |it| it.name == target_name }
    UI.user_error!("Can't find target for name #{target_name}") if target.nil?

    build_configuration = target.build_configurations.find { |it| it.name == configuration_name }
    UI.user_error!("Can't find build configuration for name #{configuration_name}") if build_configuration.nil?

    old_build_setting = build_configuration.build_settings["SWIFT_ACTIVE_COMPILATION_CONDITIONS"]
    new_build_setting = should_remove ? old_build_setting.chomp("BETA_PROFILE").strip() : "#{old_build_setting} BETA_PROFILE"

    build_configuration.build_settings["SWIFT_ACTIVE_COMPILATION_CONDITIONS"] = new_build_setting

    project.save()

    UI.message "Finished updating BETA_PROFILE build setting. Current SWIFT_ACTIVE_COMPILATION_CONDITIONS=#{new_build_setting}."
  end

  # App Store Connect

  desc "Creates new iOS app on both the Apple Developer Portal and App Store Connect"
  lane :register_app do |options|
    app_name = options[:app_name]
    UI.user_error!("App name required") if app_name.nil?

    company_name = options[:company_name]
    UI.user_error!("Name of the company required") if company_name.nil?

    language = options.key?(:language) ? options[:language] : "en-US"
    app_version = options.key?(:app_version) ? options[:app_version] : "0.0.1"

    produce(
      app_identifier: app_identifier,
      app_name: app_name,
      language: language,
      company_name: company_name,
      app_version: app_version,
      team_id: team_id,
      team_name: team_name,
      itc_team_id: itc_team_id,
      itc_team_name: itc_team_name,
    )
  end

  desc "Loads the App Store Connect API token to use in other fastlane tools and actions"
  private_lane :load_app_store_connect_api_token do |options|
    key_id = ENV["APP_STORE_CONNECT_API_KEY_ID"]
    UI.user_error!("APP_STORE_CONNECT_API_KEY_ID required") if key_id.nil?

    issuer_id = ENV["APP_STORE_CONNECT_API_KEY_ISSUER_ID"]
    UI.user_error!("APP_STORE_CONNECT_API_KEY_ISSUER_ID required") if issuer_id.nil?

    key_content = ENV["APP_STORE_CONNECT_API_KEY_CONTENT"]
    UI.user_error!("APP_STORE_CONNECT_API_KEY_CONTENT required") if key_content.nil?

    app_store_connect_api_key(
      key_id: key_id,
      issuer_id: issuer_id,
      key_content: key_content,
      is_key_content_base64: true,
      duration: 1200,
      in_house: false,
      set_spaceship_token: true,
    )
  end
end
