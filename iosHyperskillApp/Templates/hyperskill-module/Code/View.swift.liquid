import shared
import SwiftUI

extension {{ module_info.name }}View {
    struct Appearance {
        let backgroundColor = Color.background
    }
}

struct {{ module_info.name }}View: View {
    private(set) var appearance = Appearance()

    @StateObject var viewModel: {{ module_info.name }}ViewModel

    var body: some View {
        ZStack {
            UIViewControllerEventsWrapper(onViewDidAppear: viewModel.logViewedEvent)

            BackgroundView(color: appearance.backgroundColor)

            buildBody()
        }
        .onAppear {
            viewModel.startListening()
            viewModel.onViewAction = handleViewAction(_:)
        }
        .onDisappear {
            viewModel.stopListening()
            viewModel.onViewAction = nil
        }
    }

    // MARK: Private API

    @ViewBuilder
    private func buildBody() -> some View {
        switch viewModel.stateKs {
        case .idle, .loading:
            ProgressView()
        case .networkError:
            PlaceholderView(
                configuration: .networkError(
                    backgroundColor: appearance.backgroundColor,
                    action: viewModel.doRetryLoad{{ module_info.name }}
                )
            )
        case .content(let viewData):
            Text("Hello, World!")
        }
    }
}

// MARK: - {{ module_info.name }}View (ViewAction) -

private extension {{ module_info.name }}View {
    func handleViewAction(
        _ viewAction: {{ module_info.name }}FeatureActionViewAction
    ) {
        switch {{ module_info.name }}FeatureActionViewActionKs(viewAction) {}
    }
}

// MARK: - {{ module_info.name }}View_Previews: PreviewProvider -

struct {{ module_info.name }}View_Previews: PreviewProvider {
    static var previews: some View {
        UIKitViewControllerPreview {
            {{ module_info.name }}Assembly().makeModule()
        }
    }
}
